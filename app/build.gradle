/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'jacoco'
    id 'pmd'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

test {
    useJUnitPlatform()
    testLogging { events "passed", "skipped", "failed", "standardOut", "standardError" }
    finalizedBy jacocoTestReport
}

// o jacoco dá informação mais específica sobre os testes. Faz a análise de cobertura
jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

// Na fase de inspeção de código
pmd {
    consoleOutput = true
    toolVersion = "6.37.0" // 6.21.0
    // rulesMinimumPriority = 5

    // categorias de informação que se quer
    // ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]

    // custom rulesets
    ruleSetFiles = files("src/main/resources/ruleset.xml")
    ruleSets = []

    ignoreFailures = true
}


application {
    // Define the main class for the application.
    mainClass = 'application.App'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}